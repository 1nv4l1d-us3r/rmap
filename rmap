#!/bin/python
import random
import threading
import socket
import sys
import re
timeout=5
noOfThreads=10
filename=False
rawports=[]
if(len(sys.argv)<3):
    print('No arguments provided \n -P  To specify ports(csv) or range of ports.  ex: -p 80,443,8080,200-1000\n -t  To specify number of threads (default=10)\n -T  To specify Connection timeout in seconds (default=5)\n -o output filename \nUsage: cat targets.txt | rmap -p 80,443,3306')
    exit()
args=sys.argv[1:]
for a in range(0,len(args),2):
    try:
        if(args[a]=='-p' or args[a]=='-P'):
            rawports=re.sub(r",$",'',re.sub(r',,',',',args[a+1])).split(',')
        elif(args[a]=='-t'):
            noOfThreads=int(args[a+1])
        elif(args[a]=='-T'):
            timeout=int(args[a+1])
        elif(args[a]=='-o' or args[a]=='-O'):
            filename=args[a+1]
        else:
            print('Invalid Argument',args[a])
            exit()
    except IndexError:
        print("Invalid value for Argument",args[a])
        exit()
ports=[]
for x in rawports:
    if '-' in x:
        r=x.split('-')
        if(len(r)<2 or r[1]==''):
            continue
        for p in range(int(r[0]),int(r[1])+1):
           if p not in ports:
                ports.append(p)
    else:
        if int(x) not in ports:
            ports.append(int(x))

socket.setdefaulttimeout(timeout)
targets=[x.strip() for x in sys.stdin]
hosts={}
results=[]
errors={}
for i in targets:
    hosts[i]=ports.copy()

def scanrandom():
    if len(hosts)==0:
        return
    temptarget=random.choice(list(hosts.keys()))
    #print(temptarget)
    tempport=hosts[temptarget].pop(random.randrange(0,len(hosts[temptarget])))
    if(len(hosts[temptarget])==0):
        hosts.pop(temptarget)
    #print(tempport)
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    try:
        #print(f"{temptarget}:{tempport}  ",end='\r')
        s.connect((temptarget,int(tempport)))
    except (ConnectionRefusedError,socket.timeout):
        pass
    except socket.gaierror:
        if temptarget not in errors:
            errors[temptarget]=[]
        errors[temptarget].append(tempport)
    else:
        print(f'{temptarget}:{tempport}')
        results.append(f'{temptarget}:{tempport}')
    finally:
        s.close()

while hosts:
    threads=[]
    for _ in range(noOfThreads):
        threads.append(threading.Thread(target=scanrandom))

    for i in threads:
        i.start()
    for i in threads:
        i.join()

if(filename):
    f=open(filename,'w')
    for lines in results:
        f.writelines(lines+'\n')
    f.close()
if(errors):
    with open('.rmap_errors','w') as f:
        for targets in  errors:
            f.writelines(f'{targets}:{errors[targets]}'+'\n')
